import he from "he";
import hljs from "highlight.js";
import { JSDOM, VirtualConsole } from "jsdom";
import { relativePath, resolveLocalPath } from "./path.js";
const ASSET_PROPERTIES = [
  ["a[href][download]", "href"],
  ["audio source[src]", "src"],
  ["audio[src]", "src"],
  ["img[src]", "src"],
  ["img[srcset]", "srcset"],
  ["link[href]", "href"],
  ["picture source[srcset]", "srcset"],
  ["video source[src]", "src"],
  ["video[src]", "src"]
];
function isAssetPath(specifier) {
  return !/^(\w+:|#)/.test(specifier);
}
function parseHtml(html2) {
  return new JSDOM(`<!DOCTYPE html><body>${html2}`, { virtualConsole: new VirtualConsole() }).window;
}
function findAssets(html2, path) {
  const { document } = parseHtml(html2);
  const assets = /* @__PURE__ */ new Set();
  const maybeAsset = (specifier) => {
    if (!isAssetPath(specifier))
      return;
    const localPath = resolveLocalPath(path, specifier);
    if (!localPath)
      return console.warn(`non-local asset path: ${specifier}`);
    assets.add(relativePath(path, localPath));
  };
  for (const [selector, src] of ASSET_PROPERTIES) {
    for (const element of document.querySelectorAll(selector)) {
      const source = decodeURIComponent(element.getAttribute(src));
      if (src === "srcset") {
        for (const s of parseSrcset(source)) {
          maybeAsset(s);
        }
      } else {
        maybeAsset(source);
      }
    }
  }
  return assets;
}
function rewriteHtml(html2, resolve = String) {
  const { document } = parseHtml(html2);
  const maybeResolve = (specifier) => {
    return isAssetPath(specifier) ? resolve(specifier) : specifier;
  };
  for (const [selector, src] of ASSET_PROPERTIES) {
    for (const element of document.querySelectorAll(selector)) {
      const source = decodeURIComponent(element.getAttribute(src));
      element.setAttribute(src, src === "srcset" ? resolveSrcset(source, maybeResolve) : maybeResolve(source));
    }
  }
  for (const code of document.querySelectorAll("code[class*='language-']")) {
    const language = [...code.classList].find((c) => c.startsWith("language-"))?.slice("language-".length);
    if (!language)
      continue;
    if (code.parentElement?.tagName === "PRE")
      code.parentElement.setAttribute("data-language", language);
    if (!hljs.getLanguage(language))
      continue;
    let html3 = "";
    code.normalize();
    for (const child of code.childNodes) {
      html3 += isText(child) ? hljs.highlight(child.textContent, { language }).value : isElement(child) ? child.outerHTML : "";
    }
    code.innerHTML = html3;
  }
  return document.body.innerHTML;
}
function parseSrcset(srcset) {
  return srcset.trim().split(/\s*,\s*/).filter((src) => src).map((src) => src.split(/\s+/)[0]);
}
function resolveSrcset(srcset, resolve) {
  return srcset.trim().split(/\s*,\s*/).filter((src) => src).map((src) => {
    const parts = src.split(/\s+/);
    const path = resolve(parts[0]);
    if (path)
      parts[0] = path;
    return parts.join(" ");
  }).join(", ");
}
function isText(node) {
  return node.nodeType === 3;
}
function isElement(node) {
  return node.nodeType === 1;
}
class Html {
  constructor(html2) {
    this.html = html2;
  }
  static unsafe(html2) {
    return new Html(html2);
  }
  toString() {
    return this.html;
  }
}
function html(strings, ...values) {
  const parts = [];
  for (let i = 0; i < strings.length; ++i) {
    parts.push(strings[i]);
    if (i < values.length) {
      const value = values[i];
      if (value == null)
        continue;
      if (typeof value[Symbol.iterator] === "function") {
        for (const v of value) {
          if (v == null)
            continue;
          parts.push(v instanceof Html ? v.html : he.escape(String(v)));
        }
      } else {
        parts.push(value instanceof Html ? value.html : he.escape(String(value)));
      }
    }
  }
  return Html.unsafe(parts.join(""));
}
html.unsafe = Html.unsafe;
export {
  Html,
  findAssets,
  html,
  isAssetPath,
  parseHtml,
  rewriteHtml
};
