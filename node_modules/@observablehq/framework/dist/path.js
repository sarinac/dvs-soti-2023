import { dirname, join } from "node:path/posix";
function relativePath(source, target) {
  if (/^\w+:/.test(target))
    return target;
  const from = join("/", source).split(/[/]+/g).slice(0, -1);
  const to = join("/", target).split(/[/]+/g);
  const f = to.pop();
  const m = from.length;
  const n = Math.min(m, to.length);
  let i = 0;
  while (i < n && from[i] === to[i])
    ++i;
  const k = m - i;
  return (k ? "../".repeat(k) : "./") + to.slice(i).concat(f).join("/");
}
function resolvePath(root, source, target) {
  if (target === void 0)
    target = source, source = root, root = ".";
  const path = join(root, target.startsWith("/") ? "." : dirname(source), target);
  return path.startsWith("../") ? path : `/${path}`;
}
function resolveLocalPath(source, target) {
  if (/^\w+:/.test(target))
    return null;
  if (target.startsWith("#"))
    return null;
  const path = resolvePath(source, target);
  if (path.startsWith("../"))
    return null;
  return path;
}
function isPathImport(specifier) {
  return ["./", "../", "/"].some((prefix) => specifier.startsWith(prefix));
}
export {
  isPathImport,
  relativePath,
  resolveLocalPath,
  resolvePath
};
